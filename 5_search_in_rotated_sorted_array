//https://leetcode.com/problems/search-in-rotated-sorted-array/


class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int low = 0;
        int high = n - 1;
        int first = nums[0];
        
        while(low <= high){
            int mid = low + (high - low)/2;
            int value = nums[mid];
            
            if(value == target){
                return mid;
            }
            
            if(target >= first && value >= first || target < first && value < first){
                //sorted half or fully sorted.
                if(target > value){
                    //check right
                    low = mid + 1;
                }else{
                    //check left
                    high = mid - 1;
                }
            }else if(target >= first){
                 //value < first
                //first half
                high = mid - 1;
            }else{
                // target < first
                //value >= first
                //right half
                low = mid + 1;
            }
        }
        
        return -1;
    }
};
